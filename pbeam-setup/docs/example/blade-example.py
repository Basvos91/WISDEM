#!/usr/bin/env python
# encoding: utf-8
"""
example.py

Created by Andrew Ning on 2013-04-03.
Copyright (c) NREL. All rights reserved.
"""


# 1 ---------
import numpy as np
import matplotlib.pyplot as plt

import _pBEAM

# 1 ---------

# 2 ---------
# stiffness / inertial properties
r = np.array([1.5, 1.801, 1.9, 1.998, 2.103, 2.201, 2.3, 2.871, 3.001, 3.099,
              5.602, 6.998, 8.333, 10.5, 11.75, 13.5, 15.85, 18.5, 19.95, 22,
              24.05, 26.1, 28.15, 32.25, 33.5, 36.35, 38.5, 40.45, 42.5, 43.5,
              44.55, 46.5, 48.65, 52.75, 56.17, 58.9, 61.63, 63])
EA = np.array([2.985e+10, 3.029e+10, 2.64e+10, 2.238e+10, 1.745e+10, 1.394e+10,
               1.015e+10, 1.075e+10, 1.107e+10, 1.124e+10, 1.269e+10, 1.226e+10,
               1.261e+10, 1.31e+10, 1.335e+10, 1.332e+10, 1.318e+10, 1.292e+10,
               1.273e+10, 1.238e+10, 1.196e+10, 1.15e+10, 1.099e+10, 9.981e+09,
               9.629e+09, 8.721e+09, 8.042e+09, 7.41e+09, 6.692e+09, 6.353e+09,
               6.005e+09, 5.315e+09, 4.594e+09, 3.158e+09, 1.919e+09, 9.845e+08,
               6.516e+08, 4.721e+08])
EI11 = np.array([3.716e+10, 3.888e+10, 3.559e+10, 3.072e+10, 2.367e+10, 1.985e+10,
                1.555e+10, 1.657e+10, 1.782e+10, 1.827e+10, 1.279e+10, 6.417e+09,
                4.325e+09, 5.555e+09, 6.246e+09, 5.735e+09, 4.819e+09, 4.493e+09,
                4.478e+09, 3.66e+09, 2.905e+09, 2.25e+09, 1.877e+09, 1.541e+09,
                1.305e+09, 8.569e+08, 7.124e+08, 6.165e+08, 4.348e+08, 3.596e+08,
                3.04e+08, 2.421e+08, 1.866e+08, 9.758e+07, 4.394e+07, 1.53e+07,
                6.593e+06, 3.786e+06])
EI22 = np.array([3.69e+10, 3.862e+10, 3.478e+10, 3.003e+10, 2.467e+10, 1.943e+10,
                 1.355e+10, 1.442e+10, 1.514e+10, 1.542e+10, 1.728e+10, 1.449e+10,
                 1.369e+10, 7.977e+09, 7.655e+09, 6.572e+09, 6.409e+09, 6.186e+09,
                 6.064e+09, 5.751e+09, 5.413e+09, 5.062e+09, 4.579e+09, 3.659e+09,
                 3.38e+09, 2.724e+09, 2.291e+09, 1.967e+09, 1.603e+09, 1.441e+09,
                 1.286e+09, 9.988e+08, 8.16e+08, 5.183e+08, 3.191e+08, 1.944e+08,
                 1.218e+08, 8.685e+07])
GJ = np.array([1.922e+10, 2.011e+10, 1.823e+10, 1.574e+10, 1.243e+10, 1.017e+10,
               7.395e+09, 7.76e+09, 8.136e+09, 8.22e+09, 5.775e+09, 2.592e+09,
               1.427e+09, 4.942e+08, 5.349e+08, 4.76e+08, 4.023e+08, 3.721e+08,
               3.723e+08, 3.047e+08, 2.441e+08, 1.893e+08, 1.599e+08, 1.331e+08,
               1.136e+08, 7.827e+07, 6.608e+07, 5.927e+07, 4.324e+07, 3.678e+07,
               3.187e+07, 2.695e+07, 2.271e+07, 1.536e+07, 1.038e+07, 7.061e+06,
               4.461e+06, 2.985e+06])
rhoA = np.array([1994, 2024, 1763, 1495, 1166, 931.6, 678.6, 801.9, 817.9, 823.2,
                 797.9, 681.1, 617, 377.3, 372.4, 352.2, 342.9, 335.3, 331.5,
                 319.7, 305.9, 292.1, 278, 254.7, 245.3, 222.2, 208, 196, 179.9,
                 170.9, 162.1, 153.8, 138.4, 109.4, 85.35, 67.81, 49.92, 31.68])
rhoJ = np.array([4948, 5177, 4701, 4059, 3230, 2625, 1945, 2172, 2288, 2318, 1879,
                 1292, 1100, 624.7, 624.4, 553.1, 518.5, 488.7, 475.3, 432.2, 387.6,
                 346.8, 307.1, 245, 223.5, 175.8, 148.7, 128.2, 104.3, 92.84, 82.41,
                 75.11, 59.87, 37.32, 23.13, 15.01, 9.015, 6.083])

# number of sections
nsec = len(r)

p_section = _pBEAM.SectionData(nsec, r, EA, EI11, EI22, GJ, rhoA, rhoJ)
# 2 ---------


# 3 ---------
# distributed loads
Px = np.array([-1.865e+04, -1.843e+04, -1.623e+04, -1.356e+04, -1.049e+04, -7979,
               -5572, -6434, -6581, -6625, -5858, -4965, -4577, -2111, 540.7,
               4576, 148, -408.9, -187.9, -1640, -2353, -2860, -2854, -2561,
               -2609, -2497, -2340, -2174, -2136, -2082, -2032, -1907, -1721,
               -1408, -1146, -946.4, -726, -310.8])
Py = np.array([5905, 7551, 6352, 6164, 5518, 5666, 5323, 6912, 7030, 7099, 7801,
               6670, 5942, 1.978e+04, 2.585e+04, 2.444e+04, 2.352e+04, 2.286e+04,
               2.236e+04, 2.115e+04, 1.992e+04, 1.889e+04, 1.807e+04, 1.691e+04,
               1.659e+04, 1.589e+04, 1.521e+04, 1.453e+04, 1.373e+04, 1.334e+04,
               1.296e+04, 1.232e+04, 1.161e+04, 1.021e+04, 8998, 7983, 6918, -0.8501])
Pz = np.array([1.198e-12, 1.216e-12, 1.059e-12, 8.98e-13, 7.005e-13, 5.596e-13,
               4.076e-13, 4.817e-13, 4.913e-13, 4.945e-13, 4.793e-13, 4.091e-13,
               3.706e-13, 2.267e-13, 2.237e-13, 2.116e-13, 2.06e-13, 2.014e-13,
               1.991e-13, 1.92e-13, 1.837e-13, 1.755e-13, 1.67e-13, 1.53e-13,
               1.474e-13, 1.335e-13, 1.249e-13, 1.177e-13, 1.081e-13, 1.026e-13,
               9.74e-14, 9.241e-14, 8.312e-14, 6.574e-14, 5.127e-14, 4.073e-14,
               2.999e-14, 1.903e-14])

p_loads = _pBEAM.Loads(nsec, Px, Py, Pz)  # only distributed loads
# 3 ---------

# 4 ---------
# tip/base data
p_tip = _pBEAM.TipData()  # no tip mass
k = np.array([float('inf'), float('inf'), float('inf'),
              float('inf'), float('inf'), float('inf')])
p_base = _pBEAM.BaseData(k, float('inf'))  # rigid base

# create blade object
blade = _pBEAM.Beam(p_section, p_loads, p_tip, p_base)
# 4 ---------

# 5 ---------
# compute mass and natural frequncies
print 'mass =', blade.mass()
print 'natural freq =', blade.naturalFrequencies(5)
# 5 ---------

# 6 ---------
# plot displacement in second principal direction (approximately flapwise direction)
disp = blade.displacement()
dy = disp[1]
plt.plot(r, dy)
plt.xlabel('r (m)')
plt.ylabel('$\delta y$ (m)')
plt.show()
# 6 ---------

# 7 ---------
# evaluate strain at location of max airfoil thickness (upper and lower surface)
xpt = np.array([0.09497, 0.09638, 0.04027, 0.04089, -0.009785, 0.04314, 0.01534,
                -0.01719, 0.01284, 0.004925, -0.3532, -0.6938, -0.8582, -0.8728,
                -0.729, -0.5181, -0.7822, -0.7123, -0.7468, -0.726, -0.7387,
                -0.6244, -0.6062, -0.5366, -0.5244, -0.4329, -0.3978, -0.3689,
                -0.294, -0.2812, -0.2672, -0.2348, -0.2157, -0.1867, -0.1753,
                -0.194, -0.1955, -0.2054, -0.1489, -0.1511, -0.02211, -0.02265,
                0.02697, -0.02474, 0.005307, -0.02839, 0.0104, 0.007653, -0.5015,
                -0.7847, -0.9456, -1.13, -1.181, -1.212, -1.137, -1.025, -1.077,
                -0.94, -0.8843, -0.7059, -0.6604, -0.5904, -0.5619, -0.4474,
                -0.4115, -0.3838, -0.2987, -0.2824, -0.2659, -0.2346, -0.2161,
                -0.1866, -0.1747, -0.1933, -0.1951, -0.2051])
ypt = np.array([1.627, 1.651, 1.685, 1.693, 1.702, 1.709, 1.718, 1.738, 1.772,
                1.775, 1.347, 0.9991, 0.8525, 0.9825, 1.088, 1.127, 0.9459,
                0.8909, 0.9089, 0.7842, 0.682, 0.5759, 0.5225, 0.4935, 0.4575,
                0.3777, 0.3588, 0.3472, 0.3057, 0.2842, 0.2687, 0.2548, 0.2419,
                0.2139, 0.1901, 0.1718, 0.1513, 0.1409, -1.623, -1.648, -1.686,
                -1.694, -1.702, -1.71, -1.718, -1.739, -1.772, -1.776, -1.334,
                -1.006, -0.8634, -0.7814, -0.6902, -0.4859, -0.6294, -0.6504,
                -0.6241, -0.6422, -0.6005, -0.5507, -0.5018, -0.4724, -0.4479,
                -0.3791, -0.3598, -0.3465, -0.3046, -0.2826, -0.2661, -0.2509,
                -0.2371, -0.2078, -0.1817, -0.1581, -0.1346, -0.1219])
zpt = np.array([1.5, 1.801, 1.9, 1.998, 2.103, 2.201, 2.3, 2.871, 3.001, 3.099,
                5.602, 6.998, 8.333, 10.5, 11.75, 13.5, 15.85, 18.5, 19.95, 22,
                24.05, 26.1, 28.15, 32.25, 33.5, 36.35, 38.5, 40.45, 42.5, 43.5,
                44.55, 46.5, 48.65, 52.75, 56.17, 58.9, 61.63, 63, 1.5, 1.801,
                1.9, 1.998, 2.103, 2.201, 2.3, 2.871, 3.001, 3.099, 5.602, 6.998,
                8.333, 10.5, 11.75, 13.5, 15.85, 18.5, 19.95, 22, 24.05, 26.1,
                28.15, 32.25, 33.5, 36.35, 38.5, 40.45, 42.5, 43.5, 44.55, 46.5,
                48.65, 52.75, 56.17, 58.9, 61.63, 63])

strain = blade.axialStrain(len(xpt), xpt, ypt, zpt)
nstrain = len(strain)/2
plt.figure()
plt.plot(r, strain[:nstrain], label='suction side', color='k')
plt.plot(r, strain[nstrain:], label='pressure side', color='r')
plt.xlabel('r (m)')
plt.ylabel('$\epsilon$')
plt.legend()
plt.xlim([0, 63.0])
plt.show()
# 7 ---------



